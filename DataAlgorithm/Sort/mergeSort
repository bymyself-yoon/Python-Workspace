#mergeSort
def mergeSort(A, p:int, r:int): # A[p, ..., r]
    if p<r: # 병합정렬의 시작과 끝이 같아질 때까지
        q = (p+r) // 2 # 중간지점(q) 찾기
        mergeSort(A, p, q) # 앞쪽에 대한 재귀 호출
        mergeSort(A, q+1, r) # 뒤쪽에 대한 재귀 호출
        merge(A, p, q, r) # 정렬이 끝난 앞과 뒤 연결 및 정렬

def merge(A, p:int, q:int, r:int): #시작점(p), 중간지점(q), 끝점(r)
    i = p; j = q+1; t=0 # i: 앞쪽 블록의 시작점, j: 뒤쪽 블록의 시작점
    tmp = [0 for i in range(len(A))] # A 길이만큼 0으로 채워진 임시행렬 생성 i = 0, ..., len(A)-1
    while i <= q and j <= r:
        if A[i] <= A[j]: # 뒤쪽 블록의 원소가 앞쪽 블록의 원소보다 크거나 같을 때
            tmp[t] = A[i]; t += 1; i += 1 # tmp에 앞쪽 원소 대입
        else: # 앞쪽 블록의 원소가 뒤쪽 블록의 원소보다 클 때
            tmp[t] = A[j]; t += 1; j += 1 # tmp에 뒤쪽 원소 대입
    while i <= q: # 앞쪽 블록에 원소가 남아있을 경우 tmp에 대입
        tmp[t] = A[i]; t += 1; i += 1
    while j <= r: # 뒤쪽 블록에 원소가 남아있을 경우 tmp에 대입
        tmp[t] = A[j]; t += 1; j += 1
    i = p; t = 0
    while i <= r: # tmp를 A로 옮김
        A[i] = tmp[t]; t += 1; i += 1
