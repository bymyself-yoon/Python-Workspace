#heapSort
def heapSort(A): # A를 오름차순 정렬함
    buildHeap(A) # 함수 호출해서 A를 힙으로 변환
    for last in range(len(A)-1, 0, -1): # A의 마지막 인덱스부터 0까지 감소하며 반복
        A[last], A[0] = A[0], A[last] # 가장 큰 요소를 리스트의 마지막으로 이동
        percolateDown(A, 0, last-1) # 힙 속성 유지 및 정렬 범위 감소

def buildHeap(A): # A[0, ..., len(A)-1]을 힙으로 만든다
    for i in range((len(A)-2) // 2, -1, -1): # 힙의 마지막 내부 노드부터 루트 노드까지 반복
        percolateDown(A, i, len(A)-1) # percolateDown 함수 호출해서 A가 힙 속성 유지

def percolateDown(A, k:int, end:int): # 힙 속성 유지하며 A에서 노드 k를 아래로 내림
    child = 2*k+1 # 왼 자식
    right = 2*k+2 # 오른 자식
    if child <= end: # 왼 자식이 end보다 작거나 같을 경우
        if right <= end and A[child] < A[right]: # 오른 자식도 end보다 작거나 같고, 왼 자식이 오른 자식보다 작을 경우
            child = right # child: A[2k+1]와 A[2k+2] 중에 큰 원소의 인덱스 저장
        if A[k] < A[child]: # k보다 큰 값을 가지는 자식이 존재할 경우
            A[k], A[child] = A[child], A[k] # 현재 값과 큰 자식 값 교환
            percolateDown(A, child, end) # 재귀 호출
